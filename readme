






Web http协议 浏览器--> 服务器 c/s        \
Tomcat,jetty,webLogic 应用中间件：>> html css photo jsp js \
netty --> \
Tomcat--server服务器：\
    service服务的核心组件：\
        ·Connector核心组件：
             接收Engine发送过来的请求并给出响应
             三种协议：
                1.http协议：http connector
                    ·BIO模型：-同步阻塞
                    ·NIO模型：-同步非阻塞 --高并发时性能更好
                        -- 使用nio
                        -- 使用线程池
                2.ajp协议  与其他第三方http服务建立的连接协议，可与apache集成--apache处理静态资源速度快
                3.apr协议  apr http connector c语言实现，主要提升对静态资源的访问性能（HTML，css,js,jpg等）
                          如要使用此协议，需要安装类库
             1.注释翻译：request接收--response响应
             <Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/>
             <Connector port="8009" protocol="AJP/1.3" redirectPort="8443"/>
        ·Container核心组件
            --1.Engine
            --2.Host                 --对应jvm虚拟机
            --3.Servlet容器：
                --以下内容在host标签内
                ·context：           --一个context对应一个项目工程
                    <Context
                        crossContext="true"
                        docBase="E:\API\target\porject-1.0" path="/"
                        reloadable="true">
                ·context

--以上内容与以下xml依次对应：

G:\apache-tomcat-7.0.11\conf\server.xml的层级结构：
    1.<Server port="8005" shutdown="SHUTDOWN">
    2.<Service name="Catalina">
    3.<Connector port="8080" protocol="HTTP/1.1"
                     connectionTimeout="20000"
                     redirectPort="8443" />
    4.<Engine name="Catalina" defaultHost="localhost">
    5.<Host name="localhost"  appBase="webapps"
                  unpackWARs="true" autoDeploy="true">
——————————————————————————————————————————————————————————

Web工程

    web.xml

    servlet

    Listener

    tomcat -servlet容器

    tomcat不能直接运行在操作系统---jvm环境：
        host--对应jvm虚拟机
——————————————————————————————————————————————————————————
优化：
    1.Connector核心组件：
        1.http协议使用nio+线程池：
            server.xml:
            <Service>节点下：
                <!-- 使用一个共享线程池，可使用多个 -->
                <Executor
                name="tomcatThreadPool"     --线程名称
                namePrefix="catalina-exec-" --线程名称前缀
                maxThreads="500"            --最大线程数，tomcat默认为200
                maxIdleTime="60000"         --当前线程>初始化线程，空闲线程的存活时间，单位毫秒。此为1分钟
                prestartminSpareThreads="true" --若为false则minSpareThreads不起作用
                maxQueueSize="100"          --最大的等待队列数，超过则拒绝请求
                minSpareThreads="30"         --初始化时创建的线程数，默认25
                />
            <Connector>线程池配置
            <Connector
                executor="tomcatThreadPool"
                port="8080"
                <!-- protocol="HTTP/1.1" ,默认使用BIO，若使用NIO，则需要使用以下配置-->
                <!-- tomcat8 org.apache.coyote.http11.Http11Nio2Protocol-->
                <!-- tomcat6,7 org.apache.coyote.http11.Http11NioProtocol-->
                protocol="org.apache.coyote.http11.Http11NioProtocol"
                connectionTimeout="20000"       --连接超时时间
                maxConnections="10000"          --最大连接数
                maxThreads="500"                --最大线程并发数
                prestartminSpareThreads="true"
                minSpareThreads="30"
                maxQueueSize="1000"
                maxIdleTime="60000"
                enableLookups="false"           --禁用DNS查询 request.getRemoteHost
                acceptCount="10000"             --高并发时候很关键：默认100，当线程使用达到max，缓存的队列不能超过此值
                <!-- http-request请求头：
                 1.自定义请求协议数据 tcp
                 -->
                maxHttpHeaderSize="8192"        --请求头信息的最大长度，超过此长度不处理，一般8K
                redirectPort="8443"
                 />
    2.Container核心组件：接收处理来自Connector核心组件的请求
        1.找虚拟主机：
            -->转发到context -- 一个context对应一个上下文
            -->根据context找到web.xml（G:\apache-tomcat-7.0.11\conf\web.xml）
            -->web.xml---DefaultServlet、JspServlet、
            -->tomcat处理器：
                1.DefaultServlet:tomcat内置的servlet，用来处理静态资源-没有映射到其他servlet的uri则执行

                2.JspServlet :HttpServletRequest,HttpServletResponse
             <Host appBase="webapps" autoDeploy="true" name="localhost" unpackWARs="true">

             </Host>
        2.设置jvm内存：对不同的分区进行内存分配
            ·linux：
                JAVA_OPTS="-Xms256m-Xmx512m -Xss1024K-XX:PermSize=128m-XX:MaxPermSize=256m"
            ·windows：
                JAVA_OPTS= -Xms1024m-Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m
            --配置位置:
                linux系统：G:\apache-tomcat-7.0.11\bin\catalina.sh的第一行：
                windows系统：
                    G:\apache-tomcat-7.0.11\bin\catalina.bat：
                    rem Guess CATALINA_HOME if not defined 这行下加：
                    set JAVA_OPTS = -Xms1024m-Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m
    